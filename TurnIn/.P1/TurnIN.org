* Test Cases
** Bit manipulation :BITSTREAM:
*** Bit manipulation of Inode :INODE: 
    |       |             |                                                          |                    |                                                  |               |           |
    | Test Strategy | Test Number | Description                                              | Input              | Expected Output                                  | Actual Output | Pass/Fail |
    |---------------+-------------+----------------------------------------------------------+--------------------+--------------------------------------------------+---------------+-----------|
    | Valid         |           1 | Read in a stream of bits, and convert to an inode object | Stream of 114 bits | Create an inode object, by the specified 114 bits. |               |           |
    | valid         |           2 | Write as a stream of bits from inode object              | Inode object       | write as a stream of 114 bits                    |               |           |
    
    
    
*** Bit manipulation of Directory :DIR: 
    | Test Strategy | Test Number | Description                                                  | Input               | Expected Output                                       | Actual Output | Pass/Fail |
    |---------------+-------------+--------------------------------------------------------------+---------------------+-------------------------------------------------------+---------------+-----------|
    | Valid         |           3 | Read in a stream of bits, and convert to an directory object | Stream of 4096 bits | Create an directory object, by the specified 4096 bits. |               |           |
    | valid         |           4 | Write as a stream of bits from directory object         | directory object    | write as a stream of 4096 bits                        |               |           |

** Setting up the drives  
*** File system scope   :FS:
    Error Messages are sent to osErrMsg
**** FS_Boot    
    | Test Strategy | Test Number | Description                                                                   | Input          | Expected Output                                                                                         | Actual Output | Pass/Fail |
    |---------------+-------------+-------------------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------------+---------------+-----------|
    | Valid         |           4 | The external disk isn't made, and so create one and rerun this function again | Success NoDisk | The external disk does not exist, creates it                                                            |               |           |
    | Valid         |           5 | the external disk exist and has correct magical number                        | Success Disk   | The external disk does  exist, clone it to working test and verify                                      |               |           |
    | Invalid       |           6 | the external disk exist and has incorrect magical number                      | Failure Disk   | The external disk does  exist, clone it to working test and verify, but fails, resulting in E_FILE_BOOT |               |           |
       
**** FS_Sync
    | Test Strategy | Test Number | Description                             | Input                          | Expected Output                    | Actual Output | Pass/Fail |
    |---------------+-------------+-----------------------------------------+--------------------------------+------------------------------------+---------------+-----------|
    | Valid         |           7 | Saves the working disk to external disk | Working disk and external disk | Copy working disk to external disk |               |           |
**** FS_Reset 
    | Test Strategy | Test Number | Description                                                      | Input                       | Expected Output          | Actual Output | Pass/Fail |
    |---------------+-------------+------------------------------------------------------------------+-----------------------------+--------------------------+---------------+-----------|
    | valid         |           8 | Attempt to access file system after FS_RESET() but before FS_BOOT() | FS_Reset() and no FS_Boot() | E_INVALID_ACCESS_ATTEMPT |               |           |
    | invalid       |           9 | Attempt to access file system after FS_RESET() and after FS_BOOT()  | FS_Reset() and  FS_Boot()  | File system boots        |               |           |
*** Disk Scope      :DS:
    Error Messages are sent to diskErrMsg
**** DISK_SETUP and Save 
    | Test Strategy | Test Number | Description                                                   | Input           | Expected Output                                                                                                                       | Actual Output | Pass/Fail |
    |---------------+-------------+---------------------------------------------------------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------+---------------+-----------|
    | Valid         |          10 | Set all the bits to the disk to 0, and creates root directory | int DISK_INIT() | Run before disk ops take place. All sectors are all zeros, and you create he superblock and the root directory. Called during FS_Boot |               |           |
    | Valid         |          11 | External disk saves to working disk                           | int Disk_Load   | When booting a Disk, you send External Disk -> working Disk. Called during FS_Boot                                                    |               |           |
    | Valid         |          12 | Working disk saves to external disk                           | int Disk_Save   | Called by FS_Sync, send Working Disk -> External Disk.                                                                                |               |           |
**** DISK Write 
    | Test Strategy | Test Number | Description                                                                                      | Input                               | Expected Output                           | Actual Output | Pass/Fail |
    |---------------+-------------+--------------------------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------+---------------+-----------|
    | Invalid       |          13 | Disk_Write(), but size too small. EXCEPTION                                                      | Buffer is less than  SIZE_Sector    | return E_WRITE_INVALID_PARAM              |               |           |
    | Invalid       |          14 | Disk_Write(), but buffer is NULL. EXCEPTION                                                      | Buffer is NULL                      | If not, than return E_WRITE_INVALID_PARAM |               |           |
    | Invalid       |          15 | Disk_Write(), but sector parameter is not valid. EXCEPTION                                        | Sector parameter is out of bounds    | return E_WRITE_INVALID_PARM               |               |           |
    | Valid         |          16 | Disk_Write(), and it's correct size, buffer is not null, and sector parameter is within [0,100) ] | Sector has data being written to it | Write the Buffer to Sector.               |               |           |
**** DISK Read 
    | Test Strategy | Test Number | Description                                                                                     | Input                               | Expected Output                          | Actual Output | Pass/Fail |
    |---------------+-------------+-------------------------------------------------------------------------------------------------+-------------------------------------+------------------------------------------+---------------+-----------|
    | Invalid       |          17 | Disk_Read(), but size too small. EXCEPTION                                                      | Buffer is less than  SIZE_Sector    | return E_READ_INVALID_PARAM              |               |           |
    | Invalid       |          18 | Disk_Read(), but buffer is NULL. EXCEPTION                                                      | Buffer is NULL                      | If not, than return E_READ_INVALID_PARAM |               |           |
    | Invalid       |          19 | Disk_Read(), but sector parameter is not valid. EXCEPTION                                        | Sector parameter is out of bounds    | return E_READ_INVALID_PARM               |               |           |
    | Valid         |          20 | Disk_Read(), and it's correct size, buffer is not null, and sector parameter is within [0,100) ] | Sector has data being written to it | write the sector to buffer.              |               |           |

    
** Setting up Directories and files 
*** getFilePath(string path) and getDirPath(string path)
    | Test Strategy | Test Number | Description           | Input       | Expected Output                                     | Actual Output | Pass/Fail |
    |---------------+-------------+-----------------------+-------------+-----------------------------------------------------+---------------+-----------|
    | Invalid       |          21 | path is not in system | String path | -1                                                  |               |           |
    | Valid         |          22 | path is  in system    | String path | the inode that's associated with this file/directory |               |           |
      
*** DIR      :DIR:
**** Directory Create 
    | Test Strategy | Test Number | Description                                                                                                  | Input                                 | Expected Output                                                                                                           | Actual Output | Pass/Fail |
    |---------------+-------------+--------------------------------------------------------------------------------------------------------------+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------+---------------+-----------+
    | valid         |          23 | Dir_Create(path) and it doesn't already exist, the parent does not exist, and does not exceed 256 characters | Go to parent path File does not exist | Create directory at parent directory                                                                                      |               |           |
    | invalid       |          24 | Dir_Create(path) but path already exist                                                                      | Go to parent path Failure Exist       | Get the file of the parent path, and once you do that, you see the file Path already exist. Than, you return E_DIR_CREATE |               |           |
    | invalid       |          25 | Dir_Create(path) but the parent does not exist                                                               | Go to parent path Failure Bad Path    | Get the file of the parent path, but you the parent path doesn't exist. Than, you return E_DIR_CREATE                     |               |           |
    | invalid       |          26 | Dir_Create(path) but path does not exist                                                                     | Path exceeds 256 characters           | If the supposed path is greater than 256 characters, or 2048 bits, return E_TOO_LONG_PATH                                 |               |           |
**** Directory Size/Read 
    | Test Strategy | Test Number | Description | Input                                                                                                                                     | Expected Output                                                                                                        | Actual Output | Pass/Fail |
    |---------------+-------------+-------------+-------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+---------------+-----------+
    | valid         |          27 |             | DIR_SIZE() returns value. (NOTE THIS FUNCTION ONLY IS CALLED BY DIR_READ AND SHOULD ONLY WORK WHEN DIR_READ DETERMINED THE PATH IS VALID) | Gets a size of the directory, and sets hate buffer to appropriate size. Note that each entry in a directory is 20 bytes |               |           |
    | valid         |          28 |             | DIR_READ Success                                                                                                                          | The buffer is of appropriate size, and as such, you can write each inode to it.                                     |               |           |
    | invalid       |          29 |             | DIR_READ Failure Size too small                                                                                                            | The buffer is of too small size, return E_BUFFER_TOO_SMALL                                                             |               |           |
    | invalid       |          30 |             | DIR_READ Failure Dir no exist                                                                                                              | directory does not exist, return E_DIR_NO_EXIST                                                                        |               |           |
*** Files  :FILE:
**** Create/Open and Close 
    | Test Strategy | Test Number | Description | Input                                          | Expected Output                                                                           | Actual Output | Pass/Fail |
    |---------------+-------------+-------------+------------------------------------------------+-------------------------------------------------------------------------------------------+---------------+-----------|
    |               |             |             | File_Create(string File) Success               | Create a file at the path, with size 0.                                                   |               |           |
    |               |             |             | File_Create(string File) Failure already exist | Failed at creating a file, due to there already being a file. Return E_FILE_CREATE        |               |           |
    |               |             |             | File_Create(string File) Failure max file size | The files system reaches max files. Return E_FILE_CREATE                                   |               |           |
    |               |             |             | Path exceeds 256 characters                    | If the supposed path is greater than 256 characters, or 2048 bits, return E_TOO_LONG_PATH |               |           |
    |               |             |             | File_Open success                              | File doe exist and doesn't' exceed files open limit                                        |               |           |
    |               |             |             | File_Open Failure noExist                      | File does not exist, return E_NO_SUCH_FILE                                                |               |           |
    |               |             |             | File_Open Failure already Open                  | File already is opened. return E_FILE_ALREADY_OPEN                                        |               |           |
    |               |             |             | File_Open Failure too many open files          | File does  exist, but there's too many open files. return E_TOO_MANY_OPEN_FILES           |               |           |
    |               |             |             | File_Close(int fd) Success                     | Close file in open file table, with fd.                                                   |               |           |
    |               |             |             | File_Close(int fd) Failure                     | File is not in open file table, return E_CLOSE_BAD_FD                                     |               |           |
**** File Read, write  
    | Test Strategy | Test Number | Description | Input                                                                 | Expected Output                                                                                                                         | Actual Output | Pass/Fail |
    |---------------+-------------+-------------+-----------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+---------------+-----------+
    |               |             |             | File_Read(int fd, string buffer, int size) Success                    | check Open file, go to current position in file, than read from current position to size/end of file. Than have current file position |               |           |
    |               |             |             | File_Read(int fd, string buffer, int size) Failure not open           | File is not in open file table, and thus, return E_READ_BAD_FD.                                                                         |               |           |
    |               |             |             | File_Write(int fd, string buffer, int size) Success                   | Write to a file from buffer, from the buffer. Current file offset should be by size.                                                     |               |           |
    |               |             |             | File_Write(int fd, string buffer, int size) Failure not open          | Write to a file from buffer, from the buffer. Current file offset should be by size. Return E_WRITE_BAD_FD                               |               |           |
    |               |             |             | File_Write(int fd, string buffer, int size) Failure no space left     | While writing, if you find there's no more space in the disk, return E_NO_SPACE                                                         |               |           |
    |               |             |             | File_Write(int fd, string buffer, int size) Failure maximum file size | While writing, if you find there's the file takes up more than 10 data blocks, return E_FILE_TOO_BIG                                    |               |           |
      
** Seek and UnLink 
*** File_Seek and Dir/File_UnLink   :FILE:DIR: 
      
    | Test Strategy | Test Number | Description                                                 | Input                                               | Expected Output                                                                 | Actual Output | Pass/Fail |
    |---------------+-------------+-------------------------------------------------------------+-----------------------------------------------------+---------------------------------------------------------------------------------+---------------+-----------+
    | valid         |          31 | Remove file                                                 | File_Unlink(String File)                            | Remove file in inode block, and freeing up any data blocks/indoes the file used. |               |           |
    | invalid       |          32 | Remove file BUT THE FILE DOES NOT EXIST                     | File_Unlink(String File) but no such file           | File does not exist. Return E_CLOSE_BAD_FD                                      |               |           |
    | invalid       |          33 | Remove file but file is in openpagetable                   | File_Unlink(String File) but file is already opened | File is currently opened. Return E_File_IN_Use                                  |               |           |
    | valid         |          34 | remove directory                                            | Dir_Unlink(String File) Directory is  empty         | Remove file from parent inode pointers, and than free up the inode/data blocks. |               |           |
    | invalid       |          35 | remove directory but it's empty                             | Dir_Unlink(String File) Directory is not empty      | Return E_DIR_NOT_EMPTY                                                          |               |           |
    | invalid       |          36 | remove directory but it's root                              | Dir_Unlink(String File) Directory is root           | return E_DEL_ROOT_DIR                                                           |               |           |
    | invalid       |          37 | remove directory but directory never existed                | Dir_Unlink(String File) Directory does not exist    | return E_DIR_NON_EXIST                                                           |               |           |
    | valid         |          38 | file seek and it has a offset that's within 0 to file size  | File_Seek(int fd, int offset)                       | File's position is changed by the offset                                       |               |           |
    | invalid       |          39 | file seek but it has a offset that's without 0 to file size | File_Seek(int fd, int offset) Out of bounds         | Offset is negative/exceeds file size. Return E_SEEK_OUT_OF_BOUNDS               |               |           |
    | invalid       |          40 | file seek and it's fd is not in page table                   | File_Seek(int fd, int offset) bad fd                | File isn't open. Return out of bounds                                           |               |           |

* Algorithm/Code
** Program General code
   - Create the two disk, with each disk having a set of functions regulating to disk.
   - File system has the two disk, and it has all the functionality of FS.
   - OpenFileTable keeps track of each file, and it's current position
   - As we are writing bits, we have to format the disk to be able to read and write bits.
   - SUPERBLOCK | indoebitmap | datablock bitmap | sequence of indoes | sequence of datablock = 1000
   - the sequence of indoes will have 3 sectors, due to each Inode being able to represent 35 indoes.
   - The rest of the space, 994 sectors, are for the datablock block.
** Bit Parsing/Data Strucutre :BITSTREAM:
*** inode 
    - writeBitStream() :: Write teh type, size and allocation, by reversing the blow operation

    - readBitStream() :: read the type, size and allocation by following the following processes

    - Indoe structure :: There are 4 indoes within a inode sector. The makeup totals to 114 bits.
      - 1 bit  :: for which type of inode this is.
      - 13 bits :: (or 1.625 bytes) for representing the size of data blocks
      - 100 bits ::  10 sequences of 10 bits for representing the location. note that all 1s mean that this is not allocated
	
    - Fragmentation :: This results of 106 of useless data, and 3990 of useful data. Since there are 35 indoes in a sector, we split it up into an array, with each piece being a substr of 114 bits.

    - Another note :: thrall be 35 indoes within a sector, so the splitting of that by 114 is left to future Zaki.




*** directory
    - Data blocks are disgusted by two types: file and directory
    - the type of the data block is denoted by the inode, not the directory.
    - For directory, there is a 20 bytes/160 bits, which are
      + 16 bytes/128 bits :: file name. 15 characters PLUS 1 for end of string, so it's More of 15 characters
      + 4 byte/32 bits :: inode that shows which file/directory this is.
    - This means that dictionaries Can have 25 files in a a sector, but 250 files/directories overall.
    - This doesn't have the case, of half a directory's information being in one data block, and the other half being in another data block. That isn't considered.
     
*** bitmap of Indoe/data block     
    - this is just a bitmap, used to keep track of which indoes are allocated and which data blocks are allocated.
*** Sector/Root Inode      
    - A sector is a collection of a superblock, bitmaps for in use indoes and data blocks, a sequence of indoes, and a sequence of data blocks.  However, this information HAS TO BE CONVERTED to that. Otherwise, a sector is just an array of bit sets of 4096 bits.
    - However, the sector converts it's con cats to usable data structures. After each file/directory operation, it saves the stuff to working directory. Than, working directory saves it stuff to external disk when FS_SYNC() is made.
    - The disks are just a bitset array of 4096 bits, with 1000 elements in each.
    - The root inode is the Indoe that represents nothing. This is a special variable, as to not have to find out what it is on disk tediously.
      

     - Output :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getDirPath.png
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Assume path is whole dirname;
	while( read each dir in dirname) is (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile
	:return inode Path;
	stop
      
     
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getDirPath.png]]

   - int getFilePath(string path) :: Helper function, used to get the file given a path.
     - Output :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getFilePath.png
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Split path to dirname and basename (if it ends with a /, it's a directory. Else, it's a file);
	while( read each dir in dirname) is (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile(finished dirname)
	if(basename is in current direcotry)
		:return inode of basename;
		stop
	else
		:return -1;
		stop
	endif
      
     
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getFilePath.png]]

** File System :FS:
   - FS_BOOT() :: Called when booting filesystem/after a FS_RESET()
     #+BEGIN_SRC plantuml  :file Plant/FS_BOOT.png
     @startuml
     :Remove FS_RESET Lock; 
     if (ExtDisk is created) then (yes)
	if(Su
		:WorkDisk=ExtDisk;
	else (no)
		:osErrMsg=E_FILE_BOOT
		return -1;
	endif
		
     else (no)
	:ExtDisk=DefultDisk
	return 0;
    endif
	
    @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_BOOT.png]]

   - FS_Sync :: Copys the working disk to external disk
     #+BEGIN_SRC plantuml  :file Plant/FS_SYNC.png
     @startuml
	:WorkDisk=ExtDisk
	return 0;
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_SYNC.png]]

   - FS_RESET() :: Stops the filesystem from ebing access, by placing a lock on it. 
     #+BEGIN_SRC plantuml  :file Plant/FS_RESET.png
     @startuml
	if(lock is already in place) then (yes)
		:osErrMsg = E_FILE_RESET
		return -1;
		:in parent function osErrMsg = E_INVALID_ACCESS_ATTEMPT
		return -1;
	else (no)
		:Place lock on system;
	endif
	:return 0;
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_RESET.png]]

** File Access :FILE:
   - int getDirPath(string path) :: Helper function, used to get the directory given a path.
     - Ouptut :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getDirPath.png
      @startuml
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Assume path is whole dirname;
	while( read each dir in dirname) then (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile
	:return inode Path;
	stop
      
     
	@enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getDirPath.png]]

   - int getFilePath(string path) :: Helper function, used to get the file given a path.
     - Ouptut :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getFilePath.png
      @startuml
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Split path to dirname and basename (if it ends with a /, it's a directory. Else, it's a file);
	while( read each dir in dirname) is (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile(finished dirname)
	if(basename is in current direcotry)
		:return inode of basename;
	else
		:return -1;
	endif
	stop
      
     
	@enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getFilePath.png]]

   - File_Create(string path) :: Create a new file at path. There is a check to see if that file already exist, and if there's a free datablock for it.
     #+BEGIN_SRC plantuml  :file Plant/FileCreate.png
	if(count of free datablocks is > 0 && count of free indoes is >0) then (yes)
		:int inode=getDirPath(path);
		if(inode == -1) then (true)
		    :return "E_FILE_CREATE" -1;
				    stop
		else
			:Go to directory specifeid in inode;
			if(basename file already in directory) then (true)
			    :return "E_FILE_CREATE" -1;
				    stop
			else
				if(directory has not hit the 25 file limit && actualPath.length does not exceed 256 characters) then (true)
				    :Create new inode, allociated at a free datablock;
				    :return 0;
				    stop
				else
				    :return "E_FILE_CREATE" -1;
				    stop
				endif
				
			endif
		endif
	else
		:return "E_FILE_CREATE" -1;
				    stop
	endif
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileCreate.png]]


   - File_Open(string path) :: returns the file descriptor of the file, which can be used to read and write to it.
     #+BEGIN_SRC plantuml  :file Plant/FileOpen.png
	    :int inode=getFilePath(path);
	    if(inode == -1) then (true)
		:return "E_NO_SUCH_FILE" -1;
		stop
	    else
		:basename=file descriped by path;
		    
		    if(fileOpenTable does not have basename)
			:return -1 "E_FILE_ALREADY_OPEN";
			stop
		    else
			if(fileOpenTable coutn is not 10 or more) then (true)
				:Append inode to open file table;
				:return file descriptor, whcih sit he count of open file table;
				stop
			else
			    :return "E_TOO_MANY_OPEN_FILES" -1;
			endif
			stop
		    endif
	    endif
	    @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileOpen.png]]
   - File_Read(int fd, string buffer, int size IN BYTES) :: Buffer reads size from the file in fd. Note the file in open file table shuold move by size
     #+BEGIN_SRC plantuml  :file Plant/FileREAD.png
     @startuml
	if(fd is not in open file table)
		:return -1 "E_READ_BAD_FD";
		stop
	else
		:file=openfiletable[fd];
		while (i <- 0 to size*8, to account for byte to bit conversion AND file still hasn't reach of file) then (true)
			:buffer+=file.getBit[i+file.pos()];
			
		endwhile
		:file.seek(fd, size);
		:return size;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileREAD.png]]
   - File_Write(int fd, string buffer, int size IN BYTES) :: Write from buffer to the file. NOTE SIZE HAS TO BE CONSISNET. If it's not, stop the program
     #+BEGIN_SRC plantuml  :file Plant/FileWrite.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_WRITE_BAD_FD";
		stop
	elseif (size != buffer size)
		:return -1 "E_SIZE_BUFFER_MISMATCH";
		stop
	else
		:file=openfiletable[fd];
		while (i <- 0 to size*8, to account for byte to bit conversion AND file still hasn't reach of file) then (true))
			if(write requires a new datablock, but there's no free datablcok) then (yes)
				:return -1 E_NO_SPACE;
				stop
			elseif (file has reached max file size of 10 datablocks)
				:return -1 E_FILE_TOO_BIG;
				stop
			else
				:file.setBit(buffer.getBit[i],i+file.pos());
			endif
			
		endwhile
		:file.seek(fd, size);
		:return size;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileWrite.png]]
     
   - File_Seek(int fd, int offset) :: move the file forward  by offset.
     #+BEGIN_SRC plantuml  :file Plant/FileSeek.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_SEEK_BAD_FD";
		stop
	elseif (size is greater than file size or it's negative)
		:return -1 "E_SEEK_OUT_OF_BOUNDS";
		stop
	else
		:openFileTable[fd].setPos(offset);
		:return fd;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileSeek.png]]

     @startuml

   - File_Close(int fd) :: Remove file from table
     #+BEGIN_SRC plantuml  :file Plant/FileClose.png
     start
	if(fd is not in open file table)
		:return -1 "E_CLOSE_BAD_FD";
		stop
	else
		:remove from openfileTable fd;
		:return 0;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileClose.png]]
     
   - File_UnLink(string path) :: Delete file from the filesystem.
     #+BEGIN_SRC plantuml  :file Plant/FileDelete.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_FILE_IN_USE";
		stop
	else
		:inode=getPath(path);
		if(indoe equals) then (-1)
			:return -1 "E_NO_SUCH_FILE";
			stop
		else (postive)
			:set all bits in allcoaited datablcoks to 0;
			:Set allcoaited inode to 0;
			:return 0;
			stop
		endif
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileDelete.png]]

** Directory  :DIR:
   - Dir_Create(string path) :: Create directory at path
     #+BEGIN_SRC plantuml  :file Plant/DirCreate.png
     if(indoe count and datablcok count is not >0)
	:return E_DIR_CREATE;
     endif
     if(getDirPath(path)) then (is -1)
	if(getDirPath(path.parent)  && actualPath.length does not exceed 256 characters ) then (is -1)
		:return E_DIR_CREATE;
		stop
	else ( is postive   )
		:create new direcotry inode
		create new directory datablock, allociate inode to that.
		dir.path is the first 15 characters + end of file delimeter
		append idnoe to parent directory;
		    note left
			This will always set the dirname to 16 bytes.
			If need to throw an ecpetion for it, append one here.
		    endnote
		stop
	endif
     else(is postive)
	:return E_DIR_CREATE;
	stop
     endif
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DirCreate.png]]

     @startuml

   - Dir_Read(string path, string buffer, itn size) :: Read the contents of a directory.
     #+BEGIN_SRC plantuml  :file Plant/DirRead.png
     if(indoe count and datablcok count is not >0)
	:return E_DIR_CREATE;
     endif
     if(getDirPath(path)) then (is -1)
		:return E_DIR_NO_EXISTT;
		stop
	else ( is postive)
		if(size>= Dir_Size(path)) then (yes)
			while(dir in directory) is (not done)
				:buffer+=dir.type
				buffer+=dir.path;
				note left
					This automatically assumes that the path is 16 characters.
					If see fit, this can be changed,
					and path could throw an excpetion if greater than 15 characters.
				endnote
			endwhile
			stop
		else(no)
			:return  E_BUFFER_TOO_SMALL;
			stop
		endif
     endif
     @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DirRead.png]]
   - Dir_Unlink(string path) :: Remove file from drive
      #+BEGIN_SRC plantuml  :file Plant/DirUnlink.png
      @startuml
		 :inode=getDirPath(path);
		 if(indoe equals) then (-1)
			 :return -1 "E_DIR_NON_EXIST";
			 stop
		 else (postive)
			if(Dir_Size(path)!=0)
			    :return -1 "E_DIR_NON_EMPTY";
			    stop
			else
				if(path=="/")
				    :return -1 "E_DEL_ROOT_DIR";
				    stop
				else
					:set inode in inodebitmap as free.
					set all datablocks allociated to it to be 0;
					stop
					
				endif
			endif
		 endif
		 @enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/DirUnlink.png]]

** Disk :DISK:
   
   - DISK_INIT() :: Set all the data in the disk to be 0
     #+BEGIN_SRC plantuml  :file Plant/DIskInit.png
     @startuml
	while(foreach sector in disk)
		:sector.set(0);
	endwhile
	:superblock(magic key)=disk[0];
	:setInodeBit=disk[1];
	:setDataBit=disk[2];
	:disk.DirCreate("/");
	note  left: This is run before FS_BOOT()
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DIskInit.png]]

   - DISK_LOAD() :: Save external disk to workign disk. Done when booting. 

     #+BEGIN_SRC plantuml  :file Plant/DIskLoad.png
     @startuml
	while(for i in range(0,1000))
		:extDisk[i]=workDisk[i];
	endwhile
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DIskLoad.png]]

   - DISK_SAVE() :: Save working disk to loading. Called by FS_SYNC()
   #+BEGIN_SRC plantuml  :file Plant/DIskSave.png
   @startuml
      while(for i in range(0,1000))
	      :workDisk[i]=extDisk[i];
      endwhile
      @enduml
   #+END_SRC

   #+RESULTS:
   [[file:Plant/DIskSave.png]]

- DISK_WRITE(int sector, string buffer) :: Write from buffer to disk.

    #+BEGIN_SRC plantuml  :file Plant/DiskWrite.png
    @startuml
	if(buffer.size() != 512 bytes/4096 bits || buffer==NULL || sector<0 || sector >1000) then (true)
		:return E_WRITE_INVALID_PARM -1;
		stop
	else  (false)
		:disk.sector[sector].set(buffer)
		return 0;
		stop
		
	endif
	@enduml
    #+END_SRC

    #+RESULTS:
    [[file:Plant/DiskWrite.png]]



- DISK_Read(int sector, string buffer) :: read from sector to buffer

    #+BEGIN_SRC plantuml  :file Plant/DiskREAD.png
    @startuml
	if(buffer.size() != 512 bytes/4096 bits || buffer==NULL || sector<0 || sector >1000) then (true)
		:return E_READ_INVALID_PARM -1;
		stop
	else  (false)
		:buffer=disk.sector[sector];
		:return 0;
		stop
		
	endif
	@enduml
    #+END_SRC

    #+RESULTS:
    [[file:Plant/DiskREAD.png]]

