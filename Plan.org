#+LATEX_HEADER : \usepackage{amsmath}
- [ ] Make sure bitmaps gets changed  in the create functiosn for filecreate/dircreate, and file unlink/dir unlink
* Totest list
** Bitmaniplation     [0/2] :BIT:
*** TODO Inode :INODE: [0/2]
    
    | Input              | Expected Output                                 | Actual Output |
    |--------------------+-------------------------------------------------+---------------|
    | Stream of 114 bits | Create an inode object, by the spefied 114 bits |               |
    | Inode object       | write as a stream of 114 bits                   |               |
    - [ ] WriteInode :: Covnert inode to 114 bit stream, an return this.
    - [ ] ReadInode :: Convert 114 bit stream to inode, adn return it.
*** TODO Directory :DIR: [0/2]
    | Input               | Expected Output                                    | Actual Output |
    |---------------------+----------------------------------------------------+---------------|
    | Stream of 4096 bits | Create an direcotry object, with the specifcations |               |
    | Directory object    | write as a stream of 4096 bits                     |               |
    - [ ] WriteDir :: Covnert directory to 4096 bit stream, an return this.
    - [ ] ReadDir :: Convert 4096 bit stream to directory, adn return it.
** Setting up the drives  [0/2]
*** TODO File system scope   :FS:
    Error MEssages are sent to osErrMsg
**** TODO FS_Boot [0/3]   
     - INPUT :: External Disk Image/Lack of disk image
     - EX-OUTPUT :: Create disk if successful/mount disk. E_FILE_BOOT if failure
     - AC-OUTPUT ::
       | Input                                        | Expected Output                              | Acutal Output |
       |----------------------------------------------+----------------------------------------------+---------------|
       | No external disk                             | Create a external disk, than rerun FS_BOOT() |               |
       | Exeternal disk with correct magical number   | cloen external disk to working disk          |               |
       | Exeternal disk with incorrect magical number | retrun E_FILE_BOOT                           |               |
       
     - [ ] Success NoDisk :: The external disk does not exist, creates it
      
     - [ ] Success Disk :: The external disk does  exist, clone it to wroking test and verify
     - [ ] Failure Disk :: The external disk does  exist, clone it to wroking test and verify, but fails, restuling in E_FILE_BOOT
       This may happen with the superBlock. We can set the superblock to a number, and when botting, if superblock's number isn't what the number is supposed to be, assume the file system is corrupted. An example is if you expect 2 in superblcok, but it's 3, than OOF it's corrupted.
**** TODO FS_Sync
     - INPUT :: Working Disk Image and External Disk Image
     - EX-OUTPUT :: Copy Working Disk Image to External Disk Image 
     - AC-OUTPUT ::
**** TODO FS_Reset [0/3]
     - INPUT :: ExDisk and WorkDisk
     - EX-OUTPUT :: File System is unavaible to access till FS_Boot
     - AC-OUTPUT ::
     - [ ] File System is unavaible to write till fs_BOOT :: The file system is unable to be access til FS_Boot is claled. Any attmpt to do so will result in E_INVALID_ACCESS_ATTEMPT
     - [ ] Attmpt to access filesystem before/after FS_Reset ::  Access Stuff/E_INVALID_ACCESS_ATTEMPT
     - [ ] Attmpt to access filestyem before/after FS_Boot ::  E_INVALID_ACCESS_ATTEMPT/Access Stuff
*** TODO Disk Scope      :DS:
    Error MEssages are sent to diskErrMsg
**** TODO DISK_SETUP and Save [0/3]
     These are the settuping up, and saving/loading disks.
     - INPUT :: Working and External Disk
     - EX-OUTPUT :: Be able to load up, 
     - AC-OUTPUT ::
     - [ ] int DISK_INIT() :: Run before disk ops take place. All sectors are all zeros, and you create he superblcok and the root direcotry. Called during FS_Boot
     - [ ] int Disk_Load :: When booting a Disk, you send External Disk -> working Disk. Called during FS_Boot
     - [ ] int Disk_Save :: Called by FS_Sync, send Working Disk -> External Disk.
**** TODO DISK Write [0/2]
     - INPUT :: int Sector and String Buffer
     - EX-OUTPUT :: Write to Sector the Buffer
     - AC_OUTPUT :: 
  - [ ] Buffer is of SIZE_SEctor :: If not, than return E_WRITE_INVALID_PARAM
  - [ ] Buffer is nonNull :: If not, than return E_WRITE_INVALID_PARAM
  - [ ] Sector paramter is out of boudns :: retrun E_WRITE_INVALID_PARM
  - [ ] Sector has data being written to it :: Write the Buffer to Sector.
**** TODO DISK Read [0/4]
     - INPUT :: int Sector and String Buffer
     - EX-OUTPUT :: Write to Buffer from Sector
     - AC_OUTPUT :: 
     - [ ] Buffer is of SIZE_SEctor :: If not, than return E_READ_INVALID_PARAM
     - [ ] Buffer is nonNull :: If not, than return E_READ_INVALID_PARAM
     - [ ] Sector paramter is out of boudns :: retrun E_READ_INVALID_PARM
     - [ ] Sector has data being read from to it :: Write the Sector to Buffer.
** Setting up Directories and files [0/2]
*** TODO getFilePath(string path) and getDirPath(string path)
    - Input :: string path
    - Expected Output :: given path, get the inode assoicated with it | -1 if that path is not found with the correct type
    - AOutput :: 
      
*** TODO DIR     [0/2] :DIR:
**** TODO Directory Create [0/5]
     ERROR MESSAGE to osErrMsg 
	  - Input :: String Path
	  - Expected Ouput :: Given a path, it creates a direcotry (not recursvie)
	  - Actual Output ::
	  - [ ] Create directory file :: Create a directory ifle
	  - [ ] Go to parent path Success :: Get the file of the parent path, which will happen by going to root, and seeing if each folder exist
	    So if path listed is /home/zaki/fuck, you would go to /, than see if home is there. If it is and it's a direcotyr, go see if zaki si tehre. IF zaki si tehre, go to that folder, and create the directory fuck
	  - [ ] Go to parent path Failure Exist :: Get the file of the parent path, and once you do that, you see hte file *Path* already exist. Than, you return E_DIR_CREATE
	  - [ ] Go to parent path Failure Bad Path :: Get the file of the parent path, but you the parent path doesn't exist. Than, you return E_DIR_CREATE
	  - [ ] Path exceeds 256 characters :: If the supposed path is greater than 256 characters, or 2048 bits, return E_TOO_LONG_PATH
**** TODO Directory Size/Read 
     ERROR MESSAGE to osErrMsg 
     - INPUT :: String PATH, string buffer, int size
     - Expected Ouput :: Return in the number of entries and modifed buffer.
     - Actual Output ::
     - [ ] Return the number of bytes in a path with Dir_Size() :: These two functions work in tandem, and as such, have to play nice.
     - [ ] DIR_SIZE() works :: Gets a size of the direcotry, and sets hte buffer to appoperaite size. Note that each entry in a direcotry is 20 bytes
     - [ ] DIR_READ Success :: The buffer is of appoperaite size, adn as such, you can write each inode to it.
     - [ ] DIR_READ Faiure Size too small :: The buffer is of too small size, return E_BUFFER_TOO_SMALL
     - [ ] DIR_READ Faiure Dir no eixst :: directory does not exist, return E_DIR_NO_EXIST
*** TODO Files [0/2] :FILE:
**** TODO Create/Open and Close [0/10]
    Errors go to osErrMsg
    - INPUT :: string File
    - Expected Output :: Create a file |  File Descriptor [0,$\infty$] to a file  |    close the file.
    - AO-OUTPUT ::
    - [ ] File_Create(string File) Success ::  Create a file at the path, with size 0.
    - [ ] File_Create(string File) Failure already exist ::  Failed at creating a file, due to there already being a file. Return E_FILE_CREATE
    - [ ] File_Create(string File) Failure max file size ::  The filessystem reaches max files. Return E_FILE_CREATE
    - [ ] Path exceeds 256 characters :: If the supposed path is greater than 256 characters, or 2048 bits, return E_TOO_LONG_PATH
      
    - [ ] File_Open success :: File doe exist and doesnt' exceed files open limit
    - [ ] File_Open Fialure noExist :: File does not exist, return E_NO_SUCH_FILE
    - [ ] File_Open Fialure alreadyOpen :: File already is opened. return E_FILE_ALREADY_OPEN
    - [ ] File_Open Fialure too many open files :: File does  exist, but there's too many open files. return E_TOO_MANY_OPEN_FILES
      
    - [ ]  File_CLose(int fd) Success :: Close file in open file table, with fd.
    - [ ]  File_CLose(int fd) Failure :: File is not in open file table, return E_CLOSE_BAD_FD
**** TODO File Read, write  
    - INPUT :: string File
    - Expected Output :: Number of bytes in a file read from file | size of write 
    - AO-OUTPUT ::
      
    - [ ] File_Read(int fd, string fuffer, int size) Success   :: check Open file, go to current posistion in file, than read from current possiton to size/end of file. Than have current file posistion
    - [ ] File_Read(int fd, string fuffer, int size) Failure not open  :: File is not in open file table, and thus, return E_READ_BAD_FD.
      
    - [ ] File_Write(int fd, string fuffer, int size) Success ::  Write to a file from buffer, from teh buffer. Current file offset shold be by size.
    - [ ] File_Write(int fd, string fuffer, int size) Failure not open  ::  Write to a file from buffer, from teh buffer. Current file offset shold be by size. Return E_WRITE_BAD_FD
    - [ ] File_Write(int fd, string fuffer, int size) Failure no space left :: While writing, if you find there's no more space in teh disk, return E_NO_SPACE
    - [ ] File_Write(int fd, string fuffer, int size) Failure maximum file size :: While writing, if you find there's the file takes up more than 10 data blcoks, return E_FILE_TOO_BIG
      
** Seek and unLink [0/1]
*** TODO File_Seek and Dir/File_UnLink [0/10]  :FILE:DIR: 
    Error -> osErrMsg
    - Input ::  string file | strign file | string path
    - Expected Ouput ::   new location of file poitner. | file/dir is deleted
    - Actual Output ::
    - [ ] File_Unlink(String File) :: Remove file in inode lbock, and freeing up any datablocks/indoes the file used.
    - [ ] File_Unlink(String File) but no such file :: File does not exist. Return E_CLOSE_BAD_FD
    - [ ] File_Unlink(String File) but file is already opened :: File is currenlty opened. Return E_File_IN_Use

    - [ ] Dir_Unlink(String File) Directory is  empty :: Remove file from parent inode pointers, and htan free up the inode/data blocks.
    - [ ] Dir_Unlink(String File) Directory is not empty :: Return E_DIR_NOT_EMPTY 
    - [ ] Dir_Unlink(String File) Direcotry is root  :: return E_DEL_ROOT_DIR
    - [ ] Dir_Unlink(String File) Direcotry does not exist  :: retur E_DIR_NON_EXIST
	   
    - [ ] File_Seek(int fd, int offset) :: File's posstiion is chnaged by the offset
    - [ ] File_Seek(int fd, int offset) Out of bounds :: Offset is negative/exceeds file size. Return E_SEEK_OUT_OF_BOUNDS
    - [ ] File_Seek(int fd, int offset) bad fd :: File isn't open. Return out of bounds

* Algorithm/Code
** Whoel Porgram decompsiostion
   This is an outline/code of how the whole program will be. 
** Bit Parsing/Data Strucutre :BIT:
   - As we are writing bits, we have to format the disk to be able to read and write bits.
   - SUPERBLOCK | indoebitmap | datablock bitmap | sequence of indoes | sequence of datablcoks = 1000
   - the sequence of indoes will ahve 3 sectors, due to each indoe being able to represtn 35 inodes.
   - The rest of the space, 994 sectors, are for teh databock block.
     
*** inode 
    - writeBitStream() :: Write teh type, size and allociation, by reversing the blwo opeariton

    - readBitStream() :: read the type, size and allcioation by folowing the following processess

    - There are 4 indoes within a inode sector. The makeup totals to 114 bits.
      - 1 bit  :: for which type of inode this is.
      - 13 bits :: (or 1.625 bytes) for representing the size of datablocks
      - 100 bits ::  10 seqeunces of 10 bits for reprsenting the location. note that all 1s mean that this is not allociated
	
    - This results of 106 of useless data, and 3990 of useful data. Since there are 35 inodes in a sector, we split it up into an array, with each piece being a substr of 114 bits.

    - The function below is a method ofreading it. Note it doesn't return anything. Maybe i'll try to do that thing where i have an inlnie function and do it there.

    - Anotehr note: there'll be 35 inodes withn a sector, so the spliting of that by 114 is left to futrue zak.

    - Writing it to bitstream is simple. if need be write a funciton for it.

      #+HEADER: :noweb yes :tangle Main.cpp   :colnames no :comments org
     #+HEADER: :includes "<iostream> <cmath> <vector> <climits> <bitset>"
      #+BEGIN_SRC C++
	#include<iostream>
	#include<bitset>
	using namespace std;
	// Note in babel mode this will be incorrect
	
	void readBitDataInode(string Inode){
	// Type // Size // 10*10 of which bits are allociated to it.
	
	    // This little test is used to demonstrate values used to finding where to substring
	    /*
	    string test= "11111NNNNN22222NNNNN33333NNNNN44444NNNNN55555NNNNN66666NNNNN77777NNNNN88888NNNNN99999NNNNN00000NNNNNSSSSSSSSSSSSST";
	    cout << test.substr(0,100) << endl; //Which are allcoiated
	    cout << test.substr(100,13) << endl; //Size
	    cout << test.substr(113,1) << endl; //Type
	    for(int i=0; i<10; i++){ 
		cout << test.substr(i*10,10) << endl;  // used to show how to splti the function
	    }
	    */
	    
	    
		uint alloc[10];
		for(int i=0; i<10; i++){
			bitset<10> temp(Inode.substr(i*10, 10));
			cout << temp << '\t' << temp.to_ulong() << endl;
			alloc[i]=temp.to_ulong();
		}
		uint size;
		bitset<13> temp2(Inode.substr(100,13));
		size=temp2.to_ulong();
		
		bool type;
		bitset<1> temp3(Inode.substr(113,1));
		cout << temp3 << endl;
		type=temp3.to_ulong();
		
		cout << size << '\t' << type << endl;
	}
	
	int main(){
		string test= "000000000011111111110000000000111110000000000111111010101001000000000110000000000000100000001000010011111111111110";
		readBitDataInode(test);
		cout << "WOW";
	}
      #+END_SRC

      #+RESULTS:
      | 0000000000 |    0 |
      | 1111111111 | 1023 |
      | 0000000000 |    0 |
      | 1111100000 |  992 |
      | 0000011111 |   31 |
      | 1010101001 |  681 |
      | 0000000001 |    1 |
      | 1000000000 |  512 |
      | 0000100000 |   32 |
      | 0010000100 |  132 |
      |          0 |      |
      |       8191 |    0 |
      |        WOW |      |


*** datablock
    - Datablocks are disgshiustehd by two types: file and directory
    - the type of the datablock is denoted by teh inode, not the directory.
    - For directory, tehre is a 20 bytes/160 bits, which are
      + 16 bytes/128 bits :: file name. 15 characters PLUS 1 for end of string, so it's mroe of 15 characters
      + 4 byte/32 bits :: inode that shows which file/driectory this is.
    - This means that dictionaries cna have 25 files in a a sector, but 250 files/directories overall.
    - This doesn't have the case, of half a directoriy's infroamtion being in one datablcok, and the other half being in another datablock. THat isn't consdiered.
     #+NAME: bitstreamtoInode
     #+HEADER: :noweb yes :tangle Main.cpp   :colnames no :comments org 
     #+HEADER: :includes "<iostream> <cmath> <vector> <climits> <bitset>"
     #+BEGIN_SRC C++
	 using namespace std;
	 void readDir(string TestString){
	     bitset<64> inode(TestString.substr(0,4));
	     cout << inode.to_ulong() << endl;
	     char temp[10];
	     for(int i=0; i<8; i++){
		     bitset<16> temp(TestString.substr(4+i*16,16));
		     cout << (char)temp.to_ulong() << endl;
		
	     }
		
	 }

	 int main(){
	 /*
		 string temp1="iiii11111111111111112222222222222222333333333333333344444444444444445555555555555555666666666666666677777777777777778888888888888888";
		 for(int i=0; i<8; i++){
		     cout << temp1.substr(4+i*16,16) << endl;
		 }
	 */
		 /*readDir("111110000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000");*/
		 readDir("111100000000010000010000000001000010000000000100001100000000010001000000000001000101000000000100011000000000010001110000000001001000");
	 }
		
     #+END_SRC 

     #+RESULTS: bitstreamtoInode
     | 15 |
     | A  |
     | B  |
     | C  |
     | D  |
     | E  |
     | F  |
     | G  |
     | H  |

     
*** bitmap of indoe/datablock     
    - this is just a bitmap, used to keep trakc of which indoes are allociated and which datablocks are allociated.
*** Sector/Root Inode      
    - A sector is a collection of a superblock, bitmaps for in use indoes and datablocks, a sqeunce of indoes, and a sequence of datablocks.  However, this information HAS TO BE CONVERETD to that. Otehrwise, a sector is just an array of bitsets of 4096 bits.
    - However, the sector converts it's concats to usuable datasturcutres. After each file/directory operation, it saves the stuff to workign directory. Than, working directory saves it stuff to external disk when FS_SYNC() is made.
    - The disks are just a bitset array of 4096 bits, with 1000 elements in each.
    - The root inode is the indoe that represtns nothing. This is a special variable, as to not have to find out what it is on disk tediously.
      
   #+HEADER: :noweb yes :tangle Main.cpp   :colnames no :comments org
#+HEADER: :includes "<iostream> <cmath> <vector> <climits> <bitset>"
    #+BEGIN_SRC C++    
   std::bitset<4096> ExtDisk[1000];
   std::bitset<4096> WorkDisk[1000];
   #+END_SRC

   #+RESULTS:

** File System :FS:
   - FS_BOOT() :: Called when booting filesystem/after a FS_RESET()
     #+BEGIN_SRC plantuml  :file Plant/FS_BOOT.png
     @startuml
     :Remove FS_RESET Lock; 
     if (ExtDisk is created) then (yes)
	if(Su
		:WorkDisk=ExtDisk;
	else (no)
		:osErrMsg=E_FILE_BOOT
		return -1;
	endif
		
     else (no)
	:ExtDisk=DefultDisk
	return 0;
    endif
	
    @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_BOOT.png]]

   - FS_Sync :: Copys the working disk to external disk
     #+BEGIN_SRC plantuml  :file Plant/FS_SYNC.png
     @startuml
	:WorkDisk=ExtDisk
	return 0;
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_SYNC.png]]

   - FS_RESET() :: Stops the filesystem from ebing access, by placing a lock on it. 
     #+BEGIN_SRC plantuml  :file Plant/FS_RESET.png
     @startuml
	if(lock is already in place) then (yes)
		:osErrMsg = E_FILE_RESET
		return -1;
		:in parent function osErrMsg = E_INVALID_ACCESS_ATTEMPT
		return -1;
	else (no)
		:Place lock on system;
	endif
	:return 0;
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FS_RESET.png]]

** File Access :FILE:
   - int getDirPath(string path) :: Helper function, used to get the directory given a path.
     - Ouptut :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getDirPath.png
      @startuml
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Assume path is whole dirname;
	while( read each dir in dirname) then (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile
	:return inode Path;
	stop
      
     
	@enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getDirPath.png]]

   - int getFilePath(string path) :: Helper function, used to get the file given a path.
     - Ouptut :: inode number of where it is, or -1 if it's not found.
      #+BEGIN_SRC plantuml  :file Plant/getFilePath.png
      @startuml
      :Go to root inode, which should be the 0th inode;
      :From the 0th inode, go to root direcotry;
      :Split path to dirname and basename (if it ends with a /, it's a directory. Else, it's a file);
	while( read each dir in dirname) is (exist in current directory)
		:Get list of dir names in current direcotry;
		if(dir matches with a directory in current dirceotry) then (no)
			:return  -1;
			stop
		else (yes)
			:"CD" (aka just repeat the process for inode, but with that direcotry's node);
		endif
	endwhile(finished dirname)
	if(basename is in current direcotry)
		:return inode of basename;
	else
		:return -1;
	endif
	stop
      
     
	@enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/getFilePath.png]]

   - File_Create(string path) :: Create a new file at path. There is a check to see if that file already exist, and if there's a free datablock for it.
     #+BEGIN_SRC plantuml  :file Plant/FileCreate.png
	if(count of free datablocks is > 0 && count of free indoes is >0) then (yes)
		:int inode=getDirPath(path);
		if(inode == -1) then (true)
		    :return "E_FILE_CREATE" -1;
				    stop
		else
			:Go to directory specifeid in inode;
			if(basename file already in directory) then (true)
			    :return "E_FILE_CREATE" -1;
				    stop
			else
				if(directory has not hit the 25 file limit && actualPath.length does not exceed 256 characters) then (true)
				    :Create new inode, allociated at a free datablock;
				    :return 0;
				    stop
				else
				    :return "E_FILE_CREATE" -1;
				    stop
				endif
				
			endif
		endif
	else
		:return "E_FILE_CREATE" -1;
				    stop
	endif
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileCreate.png]]

     @startuml

     #+RESULTS:
     [[file:FileCreate.png]]

   - File_Open(string path) :: returns the file descriptor of the file, which can be used to read and write to it.
     #+BEGIN_SRC plantuml  :file Plant/FileOpen.png
	    :int inode=getFilePath(path);
	    if(inode == -1) then (true)
		:return "E_NO_SUCH_FILE" -1;
		stop
	    else
		:basename=file descriped by path;
		    
		    if(fileOpenTable does not have basename)
			:return -1 "E_FILE_ALREADY_OPEN";
			stop
		    else
			if(fileOpenTable coutn is not 10 or more) then (true)
				:Append inode to open file table;
				:return file descriptor, whcih sit he count of open file table;
				stop
			else
			    :return "E_TOO_MANY_OPEN_FILES" -1;
			endif
			stop
		    endif
	    endif
	    @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileOpen.png]]
   - File_Read(int fd, string buffer, int size IN BYTES) :: Buffer reads size from the file in fd. Note the file in open file table shuold move by size
     #+BEGIN_SRC plantuml  :file Plant/FileREAD.png
     @startuml
	if(fd is not in open file table)
		:return -1 "E_READ_BAD_FD";
		stop
	else
		:file=openfiletable[fd];
		while (i <- 0 to size*8, to account for byte to bit conversion AND file still hasn't reach of file) then (true)
			:buffer+=file.getBit[i+file.pos()];
			
		endwhile
		:file.seek(fd, size);
		:return size;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileREAD.png]]
   - File_Write(int fd, string buffer, int size IN BYTES) :: Write from buffer to the file. NOTE SIZE HAS TO BE CONSISNET. If it's not, stop the program
     #+BEGIN_SRC plantuml  :file Plant/FileWrite.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_WRITE_BAD_FD";
		stop
	elseif (size != buffer size)
		:return -1 "E_SIZE_BUFFER_MISMATCH";
		stop
	else
		:file=openfiletable[fd];
		while (i <- 0 to size*8, to account for byte to bit conversion AND file still hasn't reach of file) then (true))
			if(write requires a new datablock, but there's no free datablcok) then (yes)
				:return -1 E_NO_SPACE;
				stop
			elseif (file has reached max file size of 10 datablocks)
				:return -1 E_FILE_TOO_BIG;
				stop
			else
				:file.setBit(buffer.getBit[i],i+file.pos());
			endif
			
		endwhile
		:file.seek(fd, size);
		:return size;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileWrite.png]]
     
   - File_Seek(int fd, int offset) :: move the file forward  by offset.
     #+BEGIN_SRC plantuml  :file Plant/FileSeek.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_SEEK_BAD_FD";
		stop
	elseif (size is greater than file size or it's negative)
		:return -1 "E_SEEK_OUT_OF_BOUNDS";
		stop
	else
		:openFileTable[fd].setPos(offset);
		:return fd;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileSeek.png]]

     @startuml

     #+RESULTS:
     [[file:FileSeek.png]]
   - File_Close(int fd) :: Remove file from table
     #+BEGIN_SRC plantuml  :file Plant/FileClose.png
     start
	if(fd is not in open file table)
		:return -1 "E_CLOSE_BAD_FD";
		stop
	else
		:remove from openfileTable fd;
		:return 0;
		stop
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileClose.png]]
     
   - File_UnLink(string path) :: Delete file from the filesystem.
     #+BEGIN_SRC plantuml  :file Plant/FileDelete.png
     @startuml
     start
	if(fd is not in open file table)
		:return -1 "E_FILE_IN_USE";
		stop
	else
		:inode=getPath(path);
		if(indoe equals) then (-1)
			:return -1 "E_NO_SUCH_FILE";
			stop
		else (postive)
			:set all bits in allcoaited datablcoks to 0;
			:Set allcoaited inode to 0;
			:return 0;
			stop
		endif
		
	endif
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/FileDelete.png]]

** Directory  :DIR:
   - Dir_Create(string path) :: Create directory at path
     #+BEGIN_SRC plantuml  :file Plant/DirCreate.png
     if(indoe count and datablcok count is not >0)
	:return E_DIR_CREATE;
     endif
     if(getDirPath(path)) then (is -1)
	if(getDirPath(path.parent)  && actualPath.length does not exceed 256 characters ) then (is -1)
		:return E_DIR_CREATE;
		stop
	else ( is postive   )
		:create new direcotry inode
		create new directory datablock, allociate inode to that.
		dir.path is the first 15 characters + end of file delimeter
		append idnoe to parent directory;
		    note left
			This will always set the dirname to 16 bytes.
			If need to throw an ecpetion for it, append one here.
		    endnote
		stop
	endif
     else(is postive)
	:return E_DIR_CREATE;
	stop
     endif
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DirCreate.png]]

     @startuml

     #+RESULTS:
     [[file:DirCreate.png]]
   - Dir_Read(string path, string buffer, itn size) :: Read the contents of a directory.
     #+BEGIN_SRC plantuml  :file Plant/DirRead.png
     if(indoe count and datablcok count is not >0)
	:return E_DIR_CREATE;
     endif
     if(getDirPath(path)) then (is -1)
		:return E_DIR_NO_EXISTT;
		stop
	else ( is postive)
		if(size>= Dir_Size(path)) then (yes)
			while(dir in directory) is (not done)
				:buffer+=dir.type
				buffer+=dir.path;
				note left
					This automatically assumes that the path is 16 characters.
					If see fit, this can be changed,
					and path could throw an excpetion if greater than 15 characters.
				endnote
			endwhile
			stop
		else(no)
			:return  E_BUFFER_TOO_SMALL;
			stop
		endif
     endif
     @enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DirRead.png]]
   - Dir_Unlink(string path) :: Remove file from drive
      #+BEGIN_SRC plantuml  :file Plant/DirUnlink.png
      @startuml
		 :inode=getDirPath(path);
		 if(indoe equals) then (-1)
			 :return -1 "E_DIR_NON_EXIST";
			 stop
		 else (postive)
			if(Dir_Size(path)!=0)
			    :return -1 "E_DIR_NON_EMPTY";
			    stop
			else
				if(path=="/")
				    :return -1 "E_DEL_ROOT_DIR";
				    stop
				else
					:set inode in inodebitmap as free.
					set all datablocks allociated to it to be 0;
					stop
					
				endif
			endif
		 endif
		 @enduml
      #+END_SRC

      #+RESULTS:
      [[file:Plant/DirUnlink.png]]

** Disk :DISK:
   
   - DISK_INIT() :: Set all the data in the disk to be 0
     #+BEGIN_SRC plantuml  :file Plant/DIskInit.png
     @startuml
	while(foreach sector in disk)
		:sector.set(0);
	endwhile
	:superblock(magic key)=disk[0];
	:setInodeBit=disk[1];
	:setDataBit=disk[2];
	:disk.DirCreate("/");
	note  left: This is run before FS_BOOT()
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DIskInit.png]]

   - DISK_LOAD() :: Save external disk to workign disk. Done when booting. 

     #+BEGIN_SRC plantuml  :file Plant/DIskLoad.png
     @startuml
	while(for i in range(0,1000))
		:extDisk[i]=workDisk[i];
	endwhile
	@enduml
     #+END_SRC

     #+RESULTS:
     [[file:Plant/DIskLoad.png]]

   - DISK_SAVE() :: Save working disk to loading. Called by FS_SYNC()
   #+BEGIN_SRC plantuml  :file Plant/DIskSave.png
   @startuml
      while(for i in range(0,1000))
	      :workDisk[i]=extDisk[i];
      endwhile
      @enduml
   #+END_SRC

   #+RESULTS:
   [[file:Plant/DIskSave.png]]

- DISK_WRITE(int sector, string buffer) :: Write from buffer to disk.

    #+BEGIN_SRC plantuml  :file Plant/DiskWrite.png
    @startuml
	if(buffer.size() != 512 bytes/4096 bits || buffer==NULL || sector<0 || sector >1000) then (true)
		:return E_WRITE_INVALID_PARM -1;
		stop
	else  (false)
		:disk.sector[sector].set(buffer)
		return 0;
		stop
		
	endif
	@enduml
    #+END_SRC

    #+RESULTS:
    [[file:Plant/DiskWrite.png]]


    #+RESULTS:
    [[file:DiskWrite.png]]

- DISK_Read(int sector, string buffer) :: read from sector to buffer

    #+BEGIN_SRC plantuml  :file Plant/DiskREAD.png
    @startuml
	if(buffer.size() != 512 bytes/4096 bits || buffer==NULL || sector<0 || sector >1000) then (true)
		:return E_READ_INVALID_PARM -1;
		stop
	else  (false)
		:buffer=disk.sector[sector];
		:return 0;
		stop
		
	endif
	@enduml
    #+END_SRC

    #+RESULTS:
    [[file:Plant/DiskREAD.png]]

* QUESTIONS
** Part 1  

    - Is there a specific way data blocks should be structured, or are we free to design however we want, as long as it long as it contains data/name, and if it's a directory, points to other files/directories? 
      You choice - just has to be different than all zeroes
      
    - I want to make sure my understanding on the data block is correct. So a data block is where a file/directory name and data is stored. If it's a file, it has a name, then a string of bits representing data. If it's a directory, it has a directory name, and  for each file/directory that is in the directory, it would be represented with a name and a pointer to which data block this allociates to.
      
    - Does inode have a specific size, or can we parameterize how much inodes can be in a specific sector?
      you should have a common struct for each inode but multiple inodes in a sector
      
    - For int File_Read(int fd, string buffer, int size), you mention "How many buffers will you need?". What is the scenario where we would need more than 1 buffer?
      each buffer is a size of a sector - 512..... what is the request is for 1-24 bytes of data?
	    
    - Do we save the external disk as a bitmap, then read it and convert it to a working disk?
	 the structore of the external and working disk is exactly the same - why you can make a copy from exrternal to working and vice versa
	 
    - Can multiple files point to the same data block, or is the relationship between flies and data blocks one to many?
	    data block assignments are unique
** Part 2
   - So if  a buffer size is sector size-512 bytes, what would happen in the scenario where sector size is 512? Also, buffers are where the data in datablocks will store?
   - File_Write() error message for partial write is t o set oErrMsg to E_PARTIAL_FILE_WRITE, yet when you go read up on the actual function, you'll see it already sets osErrMsg to either E_NO_SPACE for not enough space on the disk to write, or E_FILE_TOO_BIG if it exceed max file size. So wouldn't E_PARTIAL_FILE_WRITE overwrite the other two errors, or what?
   - Is there a max number of files/directories within a direcotry?
   - Can first half of a directory be in 1 datablock, with the second half being in datablock 

* Specifications 
** System Decomposistion  
*** Data
    - External Disk :: The disk to store things onto.
    - Working Disk :: The disk represnting ram, where you temporary store data onto.
    - Buffer :: A stream of bits, used ot reprsent data.
    - Open Files :: A list of files/file descriptors that are currently open.
*** Parameters
**** Disk    
    - Buffer SIze :: 512 Bytes.
    - Inode Count :: Number of indoes within a sector. 3 within each sector
    - Sector Size :: 512 Bytes
    - Sector Num :: 1000  num.
**** Files/Open Files
    - MaxOpenFiles ::   Max open files is 10, but there's a paremeter here
    - Max Path Length :: 256 characters
    - Directory Name/Inode location :: 16 bytes for the name, 4 bytes for the inode
    - Types of characters in file name :: case senstive letters, numbers and dots.
    - Max number of files/dreictories ::  100
    - Max number of files within a directory :: $\frac{\text{sectorSize}-16}{4}$
*** Sets of function
    Assume global data is always available.
     Return 0 if successful.
**** File System
     - FS_BOOT() :: Check if external disk is made and if not, make it. Copy it to wrokign disk. If external disk exist BUT it's superblcok si wrong, osErrMsg=E_FILE_BOOT
     - FS_SYNC() :: Copys the working disk to the external disk. 
     - FS_RESET() :: Call FS_SYNC(), than make file system unavaible till FS_BOOT(). If the system already is unavaible, return E_FILE_RESET osErrMsg
     - Access file system when not available :: osErrMsg is E_INVALID_ACCESS_ATTEMPT.
**** File Access
     - File_Create(string path)  :: create a file to the path. if this fails, due to there already being a file in the path, return with the E_FILE_CREATE errorr
     - File_Open(string path) :: Put that file in the open file table
     - File_Read(int fd, string buffer, int size)
**** Direcotry
**** Disk
** Glossary/Notes 
*** Glossary   

   - SuperBlock :: Block of data used as metadata. In this project, it'll be in Block 0.
     
   - Sector :: A [Sector_SIZE]*512, made up of a bitmap.
   - Disk :: A set of NUM_SECTORS * 1000 of sectors
   - inode Block :: a Block of data that has metadata of the file. 
     + Size of the file
     + type of the file (normal/dicteory)
     + which data blcoks are allociated ot ehre.
   - Data Blocks :: Same size as a disk sector Part of the disk is dedicated to data block, with each data block being one to one with a file.
   - Path lookup Process :: Go to root node (should be at 0), and check it's
     
*** Psudocode
   - Disk :: Each disk is made up of an array of sectors, of size SECTOR_SIZE*512, and there's NUM_OF_SECTORS*1000
     - Each
   - Open file table :: The open file table has a maxium of 10 files, and for each file, it has a pointer, indicating it's current posistion
     + Each read/write invokes seek, which shifts the direction *postivily*. Once it hits the end of the file lenght, it should stop.
