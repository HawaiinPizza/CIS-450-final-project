% Created 2020-04-05 Sun 02:24
% Intended LaTeX compiler: pdflatex
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\date{\today}
\title{}
\hypersetup{
 pdfauthor={},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 26.3 (Org mode 9.3.6)}, 
 pdflang={English}}
\begin{document}

\tableofcontents

\#+LATEX\textsubscript{HEADER} : \usepackage{amsmath}
\section{Speciifcatiosn}
\label{sec:orgdfffabd}
\begin{enumerate}
\item System Decomposistion
\label{sec:orgc416e0a}
\begin{enumerate}
\item Data
\label{sec:org994b331}
\item Parameters
\label{sec:org7a52614}
\item Requests
\label{sec:org8dfab9b}
\end{enumerate}
\item Glossary/Notes
\label{sec:orge990f60}
\begin{description}
\item{SuperBlock} Block of data used as metadata. In this project, it'll be in Block 0.

\item{Sector} A [Sector\textsubscript{SIZE}]*512, made up of a bitmap.
\item{Disk} A set of NUM\textsubscript{SECTORS} * 1000 of sectors
\item{inode Block} a Block of data that has metadata of the file. 
\begin{itemize}
\item Size of the file
\item type of the file (normal/dicteory)
\item which data blcoks are allociated ot ehre.
\end{itemize}
\item{Data Blocks} Same size as a disk sector Part of the disk is dedicated to data block.
\item{Path lookup Process} Go to root node (should be at 0), and check it's
\item{Bytes needed to store info on a inode} 
\end{description}

\begin{enumerate}
\item Psudocode
\label{sec:org072a903}
\begin{description}
\item{Disk} Each disk is made up of an array of sectors, of size SECTOR\textsubscript{SIZE}*512, and there's NUM\textsubscript{OF}\textsubscript{SECTORS}*1000
\begin{itemize}
\item Each
\end{itemize}
\item{Open file table} The open file table has a maxium of 10 files, and for each file, it has a pointer, indicating it's current posistion
\begin{itemize}
\item Each read/write invokes seek, which shifts the direction \textbf{postivily}. Once it hits the end of the file lenght, it should stop.
\end{itemize}
\end{description}
\end{enumerate}
\end{enumerate}
\section{Totest list}
\label{sec:org33ecc89}
\begin{enumerate}
\item Milestone  Setting up the drives [0/1]
\label{sec:org7e8df4b}
\begin{enumerate}
\item File system scope
\label{sec:org53a4d75}
Error MEssages are sent to osErrMsg
\begin{enumerate}
\item {\bfseries\sffamily TODO} FS\textsubscript{Boot} [0/5]
\label{sec:org2fee89e}
\begin{description}
\item{INPUT} External Disk Image/Lack of disk image
\item{EX-OUTPUT} Create disk if successful, E\textsubscript{FILE}\textsubscript{BOOT} if failure
\item{AC-OUTPUT} 

\item{$\square$ Success NoDisk} The external disk does not exist, creates it
\item{$\square$ Failure NoDisk} The external disk does not exist, attmpts to create but failure. E\textsubscript{FILE}\textsubscript{BOOT}

\item{$\square$ Success Disk} The external disk does  exist, clone it to wroking test and verify
\item{$\square$ Failure Disk} The external disk does  exist, clone it to wroking test and verify, but fails, restuling in E\textsubscript{FILE}\textsubscript{BOOT}
This may happen with the superBlock. We can set the superblock to a number, and when botting, if superblock's number isn't what the number is supposed to be, assume the file system is corrupted. An example is if you expect 2 in superblcok, but it's 3, than OOF it's corrupted.
\end{description}
\item {\bfseries\sffamily TODO} FS\textsubscript{Sync}/FS\textsubscript{Reset}
\label{sec:org463a3e6}
\begin{description}
\item{INPUT} Working Disk Image and External Disk Image
\item{EX-OUTPUT} Copy Working Disk Image to External Disk Image
\item{AC-OUTPUT} 
\end{description}
\item {\bfseries\sffamily TODO} FS\textsubscript{Reset} [0/3]
\label{sec:org343b071}
\begin{description}
\item{INPUT} ExDisk and WorkDisk
\item{EX-OUTPUT} File System is unavaible to access till FS\textsubscript{Boot}
\item{AC-OUTPUT} 

\item{$\square$ File System is unavaible to write till fs\textsubscript{BOOT}} The file system is unable to be access til FS\textsubscript{Boot} is claled. Any attmpt to do so will result in E\textsubscript{INVALID}\textsubscript{ACCESS}\textsubscript{ATTEMPT}
\item{$\square$ Attmpt to access filesystem before/after FS\textsubscript{Reset}} Access Stuff/E\textsubscript{INVALID}\textsubscript{ACCESS}\textsubscript{ATTEMPT}
\item{$\square$ Attmpt to access filestyem before/after FS\textsubscript{Boot}} E\textsubscript{INVALID}\textsubscript{ACCESS}\textsubscript{ATTEMPT}/Access Stuff
\end{description}
\item {\bfseries\sffamily TODO} Correct parameters and read disk
\label{sec:orgb3975c9}
\begin{description}
\item{INPUT} Paremters of the system.
\begin{itemize}
\item Number of sectors
\item Size of each sector
\item Number of Inodes within each sector
\end{itemize}
\item{Function} Check the paremetsr, and if correct, read disk
\item{$\square$ Make sure SectorSize/SectorNum is nonzero} Invalid size/num exception;
\item{$\square$ Make sure SectorNum does not exceed \(\frac{2^{\text{Sector Size/Number of Inodes within a Sector}}}{\text{Sector Size} \ *\ 1024E3}\)} Number of sectors exceed Sector Size/number of inodes iwthin each sector
\item{$\square$} ::
\end{description}
\end{enumerate}
\item Disk Scope
\label{sec:orged313fb}
Error MEssages are sent to diskErrMsg
\begin{enumerate}
\item {\bfseries\sffamily TODO} DISK\textsubscript{SETUP} and Save [0/3]
\label{sec:org0165802}
These are the settuping up, and saving/loading disks.
\begin{description}
\item{INPUT} Working and External Disk
\item{EX-OUTPUT} Be able to load up,
\item{AC-OUTPUT} 

\item{$\square$ int DISK\textsubscript{INIT}()} Run before disk ops take place. All sectors are all zeros, and you create he superblcok and the root direcotry. Called during FS\textsubscript{Boot}
\item{$\square$ int Disk\textsubscript{Load}} When booting a Disk, you send External Disk -> working Disk. Called during FS\textsubscript{Boot}
\item{$\square$ int Disk\textsubscript{Save}} Called by FS\textsubscript{Sync}, send Working Disk -> External Disk.
\end{description}
\item {\bfseries\sffamily TODO} DISK Write [0/2]
\label{sec:org995a0f6}
\begin{description}
\item{INPUT} int Sector and String Buffer
\item{EX-OUTPUT} Write to Sector the Buffer
\item{AC\textsubscript{OUTPUT}} 

\item{$\square$ Buffer is of SIZE\textsubscript{SEctor}/nonNull} If not, than return E\textsubscript{WRITE}\textsubscript{INVALID}\textsubscript{PARAM}
\item{$\square$ Sector has data being written to it} Write the Buffer to Sector.
\end{description}
\item {\bfseries\sffamily TODO} DISK Read [0/2]
\label{sec:org0140d68}
\begin{description}
\item{INPUT} int Sector and String Buffer
\item{EX-OUTPUT} Write to Buffer from Sector
\item{AC\textsubscript{OUTPUT}} 

\item{$\square$ Buffer is of SIZE\textsubscript{SEctor}/nonNull} If not, than return E\textsubscript{READ}\textsubscript{INVALID}\textsubscript{PARAM}
\item{$\square$ Sector has data being read from to it} Write the Sector to Buffer.
\end{description}
\end{enumerate}
\end{enumerate}
\item Milestone Setting up Directories and files [0/2]
\label{sec:orgb545114}
\begin{enumerate}
\item {\bfseries\sffamily TODO} DIR     [0/2]
\label{sec:org49e0e7a}
\begin{enumerate}
\item {\bfseries\sffamily TODO} Directory Create [0/2]
\label{sec:orge67ac69}
ERROR MESSAGE to osErrMsg 
\begin{description}
\item{Input} String Path
\item{Expected Ouput} Given a path, it creates a direcotry (not recursvie)
\item{Actual Output} 

\item{$\square$ Create directory file} Create a directory ifle
\item{$\square$ Go to parent path Success} Get the file of the parent path, which will happen by going to root, and seeing if each folder exist
So if path listed is /home/zaki/fuck, you would go to /, than see if home is there. If it is and it's a direcotyr, go see if zaki si tehre. IF zaki si tehre, go to that folder, and create the directory fuck
\item{$\square$ Go to parent path Failure Exist} Get the file of the parent path, and once you do that, you see hte file \textbf{Path} already exist. Than, you return E\textsubscript{DIR}\textsubscript{CREATE}
\item{$\square$ Go to parent path Failure Bad Path} Get the file of the parent path, but you the parent path doesn't exist. Than, you return E\textsubscript{DIR}\textsubscript{CREATE}
\end{description}
\item {\bfseries\sffamily TODO} Directory Size/Read
\label{sec:org6049fd8}
ERROR MESSAGE to osErrMsg 
\begin{description}
\item{INPUT} String PATH, string buffer, int size
\item{Expected Ouput} Return in the number of entries and modifed buffer.
\item{Actual Output} 

\item{$\square$ Return the number of bytes in a path with Dir\textsubscript{Size}()} These two functions work in tandem, and as such, have to play nice.
\item{$\square$ DIR\textsubscript{SIZE}() works} Gets a size of the direcotry, and sets hte buffer to appoperaite size. Note that each entry in a direcotry is 20 bytes
\item{$\square$ DIR\textsubscript{READ} Success} The buffer is of appoperaite size, adn as such, you can write each inode to it.
\item{$\square$ DIR\textsubscript{READ} Faiure} The buffer is of too small size, return E\textsubscript{BUFFER}\textsubscript{TOO}\textsubscript{SMALL}
\end{description}
\end{enumerate}
\item {\bfseries\sffamily TODO} Files [0/2]
\label{sec:org58e2019}
\begin{enumerate}
\item {\bfseries\sffamily TODO} Create/Open and Close [0/7]
\label{sec:org78b568e}
Errors go to osErrMsg
\begin{description}
\item{INPUT} string File
\item{Expected Output} Create a file |  File Descriptor [0,\(\infty\)] to a file  |    close the file.
\item{AO-OUTPUT} 

\item{$\square$ File\textsubscript{Create}(string File) Success} Create a file at the path, with size 0.
\item{$\square$ File\textsubscript{Create}(string File) Failure} Failed at creating a file, due to there already being a file. Return E\textsubscript{FILE}\textsubscript{CREATE}

\item{$\square$ File\textsubscript{Open} success} File doe exist and doesnt' exceed files open limit
\item{$\square$ File\textsubscript{Open} Fialure noExist} File does not exist, return E\textsubscript{NO}\textsubscript{SUCH}\textsubscript{FILE}
\item{$\square$ File\textsubscript{Open} Fialure too many open files} File does  exist, but there's too many open files. return E\textsubscript{TOO}\textsubscript{MANY}\textsubscript{OPEN}\textsubscript{FILES}

\item{$\square$ File\textsubscript{CLose}(int fd) Success} Close file in open file table, with fd.
\item{$\square$ File\textsubscript{CLose}(int fd) Failure} File is not in open file table, return E\textsubscript{CLOSE}\textsubscript{BAD}\textsubscript{FD}
\end{description}
\item {\bfseries\sffamily TODO} File Read, write
\label{sec:org9bfacd7}
\begin{description}
\item{INPUT} string File
\item{Expected Output} Number of bytes in a file read from file | size of write
\item{AO-OUTPUT} 

\item{$\square$ File\textsubscript{Read}(int fd, string fuffer, int size) Success  } check Open file, go to current posistion in file, than read from current possiton to size/end of file. Than have current file posistion
\item{$\square$ File\textsubscript{Read}(int fd, string fuffer, int size) Failure not open } File is not in open file table, and thus, return E\textsubscript{READ}\textsubscript{BAD}\textsubscript{FD}.

\item{$\square$ File\textsubscript{Write}(int fd, string fuffer, int size) Success} Write to a file from buffer, from teh buffer. Current file offset shold be by size.
\item{$\square$ File\textsubscript{Write}(int fd, string fuffer, int size) Failure not open } Write to a file from buffer, from teh buffer. Current file offset shold be by size. Return E\textsubscript{WRITE}\textsubscript{BAD}\textsubscript{FD}
\item{$\square$ File\textsubscript{Write}(int fd, string fuffer, int size) Failure no space left} Size requetsed exceeds the size of the file system. Return E\textsubscript{NO}\textsubscript{SPACE}
\item{$\square$ File\textsubscript{Write}(int fd, string fuffer, int size) Failure maximum file size} File will exceed maxiumium file size.
\end{description}
\end{enumerate}
\end{enumerate}

\item Milestone Seek and unLink [0/1]
\label{sec:org575c9c7}
\begin{enumerate}
\item {\bfseries\sffamily TODO} File\textsubscript{Seek} and Dir/File\textsubscript{UnLink}[0/10]
\label{sec:org7f42bcb}
Error -> osErrMsg
\begin{description}
\item{Input} string file | strign file | string path
\item{Expected Ouput} new location of file poitner. | file/dir is deleted
\item{Actual Output} 

\item{$\square$ File\textsubscript{Unlink}(String File)} Remove file in inode lbock, and freeing up any datablocks/indoes the file used.
\item{$\square$ File\textsubscript{Unlink}(String File) but no such file} File does not exist. Return E\textsubscript{CLOSE}\textsubscript{BAD}\textsubscript{FD}
\item{$\square$ File\textsubscript{Unlink}(String File) but file is already opened} File is currenlty opened. Return E\textsubscript{File}\textsubscript{IN}\textsubscript{Use}

\item{$\square$ Dir\textsubscript{Unlink}(String File) Directory is  empty} Remove file from parent inode pointers, and htan free up the inode/data blocks.
\item{$\square$ Dir\textsubscript{Unlink}(String File) Directory is not empty} Return E\textsubscript{DIR}\textsubscript{NOT}\textsubscript{EMPTY}
\item{$\square$ Dir\textsubscript{Unlink}(String File) Direcotry is root } return E\textsubscript{DEL}\textsubscript{ROOT}\textsubscript{DIR}
\item{$\square$ Dir\textsubscript{Unlink}(String File) Direcotry does not exist } 


\item{$\square$ File\textsubscript{Seek}(int fd, int offset)} File's posstiion is chnaged by the offset
\item{$\square$ File\textsubscript{Seek}(int fd, int offset) Out of bounds} Offset is negative/exceeds file size. Return E\textsubscript{SEEK}\textsubscript{OUT}\textsubscript{OF}\textsubscript{BOUNDS}
\item{$\square$ File\textsubscript{Seek}(int fd, int offset) bad fd} File isn't open. Return out of bounds
\end{description}
\end{enumerate}
\end{enumerate}
\section{Algorithm}
\label{sec:org349393e}
\begin{enumerate}
\item Functional Decmposistion
\label{sec:org38f46ad}
\item Implmentation Details
\label{sec:org2473c27}
\begin{enumerate}
\item Whoel Porgram decompsiostion
\label{sec:orgd4b7590}
\item R\textsubscript{n} decmpossiton
\label{sec:orgc3f0bf9}
\end{enumerate}
\end{enumerate}
\end{document}